/* eslint-disable @typescript-eslint/no-explicit-any */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/npc.glb 
*/

import React, { forwardRef, useEffect } from "react";
import { useGraph } from "@react-three/fiber";
import { useAnimations, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { UseGLTF } from "../types/use-gltf";
import { ExtendedGroup } from "./NPC";

export const NPCModel = forwardRef<ExtendedGroup, any>((props, ref) => {
  const { scene, animations } = useGLTF("/models/npc.glb") as UseGLTF;
  const { actions } = useAnimations(animations, ref as any);
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as any;

  useEffect(() => {
    if (!actions || !actions["idle"]) {
      console.warn(`Animation "idle" not found in model.`);
      return;
    }

    const animAction = actions["idle"];
    animAction.reset().fadeIn(0.24).play();

    return () => {
      animAction?.fadeOut(0.24);
    };
  }, [actions]);

  return (
    <group ref={ref} {...props} dispose={null}>
      <group name="Scene">
        <group name="fall_guys">
          <primitive object={nodes._rootJoint} />
          <skinnedMesh
            name="body"
            geometry={nodes.body.geometry}
            material={materials.Material}
            skeleton={nodes.body.skeleton}
          />
          <skinnedMesh
            name="eye"
            geometry={nodes.eye.geometry}
            material={materials.Material}
            skeleton={nodes.eye.skeleton}
          />
          <skinnedMesh
            name="hand-"
            geometry={nodes["hand-"].geometry}
            material={materials.Material}
            skeleton={nodes["hand-"].skeleton}
          />
          <skinnedMesh
            name="leg"
            geometry={nodes.leg.geometry}
            material={materials.Material}
            skeleton={nodes.leg.skeleton}
          />
        </group>
      </group>
    </group>
  );
});

useGLTF.preload("/models/npc.glb");
